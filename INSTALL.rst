INSTALLING
----------

.. note::
    
    These installation instructions assume you're installing on RHEL-6.

Start by installing the library files themselves. You can do that by
installing the package provided by your distribution, or, if such
package is not available, you can run::

    python setup.py build
    python setup.py install

Next, create the secrets and state directories::

    mkdir -p -m 0750 /etc/totpcgi/totp
    mkdir -p -m 0700 /var/lib/totpcgi

Next, create the user that the CGI will be running as::

    useradd -M -s/sbin/nologin -d/var/lib/totpcgi

Set the ownership on directories::

    chgrp -R totpcgi /etc/totpcgi
    chown -R totpcgi /var/lib/totpcgi

SSL Mutual Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~
To ensure that only trusted clients are allowed to talk to the server,
you should configure mutual SSL authentication. For that, you'd need to
generate a CA certificate, a server certificate, and a certificate for
each of your clients. 

Steps to do that can be found in many places on the web, so google for
something like "sslverifyclient openssl genrsa" -- you should have a
couple of decent hits.

Copy the certificates and keys as follows::

    /etc/pki/tls/certs/totp-server.crt
    /etc/pki/tls/certs/totpcgi-ca.crt
    /etc/pki/tls/private/totp-server.key
    /etc/pki/tls/private/totpcgi-ca.key

Make sure the .key files are owned and readable by root only.

.. hint::

    If you use puppet or func, you can reuse certificates generated by
    them. For puppet, the files are:

      * /var/lib/puppet/ssl/ca/ca_crt.pem 
      * /var/lib/puppet/ssl/private_keys/[your-server].pem
      * /var/lib/puppet/ssl/certs/[your-server].pem

Next, you'll need to install one of the CGIs.

Install Regular CGI
~~~~~~~~~~~~~~~~~~~
Copy totp.cgi into /var/www/totpcgi/index.cgi and set the permissions::

    mkdir -p -m 0551 /var/www/totpcgi
    cp -a totp.cgi /var/www/totpcgi/index.cgi
    chown -R totpcgi:totpcgi /var/www/totpcgi
    chmod 0550 /var/www/totpcgi/index.cgi

Create the apache config file in /etc/httpd/conf.d/totpcgi.conf::

    <VirtualHost [your-server-ip]:443>
        ServerAdmin [bob@example.com]
        DocumentRoot /var/www/totpcgi
        ServerName totp.example.com
        ErrorLog /var/log/httpd/totpcgi-error.log
        CustomLog /var/log/httpd/totpcgi-access.log common
        SuexecUserGroup totpcgi totpcgi
        AddHandler cgi-script .cgi
        DirectoryIndex index.cgi

        SSLEngine on
        SSLCertificateFile /etc/pki/tls/certs/totp-server.crt
        SSLCertificateKeyFile /etc/pki/tls/private/totp-server.key
        SSLCACertificateFile /etc/pki/tls/certs/totpcgi-ca.crt

        SSLVerifyClient require
        SSLVerifyDepth 10

        CustomLog /var/log/httpd/totpcgi-ssl-request-log \
                  "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

        <Directory "/var/www/totpcgi">
                Options ExecCGI
        </Directory>

    </VirtualHost>

Install FastCGI
~~~~~~~~~~~~~~~
Nearly identical to what is above. The benefit of FastCGI is that it is
quite a bit faster than CGI (as the name implies), without the extra
overhead of starting another CGI process on each HTTP request hit.
Though it is unlikely that your totpcgi server will see much traffic to
*really* matter, if you are interested in avoiding performance problems,
use FastCGI.

Start by installing mod_fcgid and flup::

    yum install mod_fcgid python-flup

Next, copy the .fcgi in place, following the same procedure as .cgi::

    mkdir -p -m 0551 /var/www/totpcgi
    cp -a totp.fcgi /var/www/totpcgi/index.fcgi
    chown -R totpcgi:totpcgi /var/www/totpcgi
    chmod 0550 /var/www/totpcgi/index.fcgi

Create the config file in /etc/httpd/conf.d/totpcgi.conf::

    <VirtualHost [your-server-ip]:443>
        ServerAdmin [bob@example.com]
        DocumentRoot /var/www/totpcgi
        ServerName totp.example.com
        ErrorLog /var/log/httpd/totpcgi-error.log
        CustomLog /var/log/httpd/totpcgi-access.log common
        SuexecUserGroup totpcgi totpcgi
        AddHandler fcgid-script .fcgi
        DirectoryIndex index.fcgi

        SSLEngine on
        SSLCertificateFile /etc/pki/tls/certs/totp-server.crt
        SSLCertificateKeyFile /etc/pki/tls/private/totp-server.key
        SSLCACertificateFile /etc/pki/tls/certs/totpcgi-ca.crt

        SSLVerifyClient require
        SSLVerifyDepth 10

        CustomLog /var/log/httpd/totpcgi-ssl-request-log \
                  "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

        <Directory "/var/www/totpcgi">
                Options ExecCGI
        </Directory>

    </VirtualHost>

.. note::

    Major thing to remember with .fcgi is that you will need to restart
    the server any time you make changes to the .fcgi file.


Install SELinux policy
~~~~~~~~~~~~~~~~~~~~~~
Yes, you really should. SELinux policy files come bundled in the
tarball. Copy them over to the server and run::

    sh totpcgi.sh

.. warning::

    If you have modified any of the paths used above, you'll also need
    to modify the totpcgi.fc file and the totpcgi.sh file.


Provision some secrets
~~~~~~~~~~~~~~~~~~~~~~
Totp-cgi uses the same file format for TOTP secrets as files generated
by google-authenticator. To provision a secret, do::

    yum install google-authenticator

Follow the prompts. This will create a file in your
~/.google-authenticator. Copy it into place for use with totpcgi::

    cp ~/.google-authenticator /etc/totpcgi/totp/[username].totp
    chgrp totpcgi /etc/totpcgi/totp/[username].totp
    chmod 0440 /etc/totpcgi/totp/[username].totp

.. warning::

    The program will also produce a link which you can copy and paste
    into your browser to see a QR image that you can snap with your
    phone in order to import the secret into your phone app. If you are
    going to go that route, make sure you use your browser's no-cache
    mode ("Private Browsing" or "Incognito Mode") to prevent the secret
    from being saved in your browser's history. You can also install
    "qrencode" to have the QR code generated in the terminal.

Repeat this for as many users as you have. You can use puppet to
provision these files with relative ease.

Set up the clients
~~~~~~~~~~~~~~~~~~
First, create a SSL key and certificate for the client, and sign it with
your CA key. You'll need to combine them into one .pem file for use with
pam_url. Pay attention, as the order is important (client cert first,
then CA cert, then the key)::

    cat [your-client].crt > /etc/pki/totpcgi.pem
    cat ca.crt >> /etc/pki/totpcgi.pem
    cat [your-client].key >> /etc/pki/totpcgi.pem
    chown root:root /etc/pki/totpcgi.pem
    chmod 0400 /etc/pki/totpcgi.pem

You need to also add the ca.crt to the list of trusted CAs::

    cat ca.crt >> /etc/pki/tls/certs/ca-bundle.crt

.. hint::

    If you are using puppet's SSL keys, you'll find the files on the
    client in the following locations:

      * /var/lib/puppet/ssl/certs/ca.pem
      * /var/lib/puppet/ssl/certs/[your-client].pem
      * /var/lib/puppet/ssl/private_keys/[your-client].pem

You are now ready to test to see if all is working right! Run the
following command, replacing [username] and [token] with valid entries::

    curl --cert /etc/pki/totpcgi.pem \
         --data 'user=[username];token=[token];mode=PAM_SM_AUTH' \
         https://totp.example.com

If all worked well, you should see::

    OK

.. warning::

    You shouldn't proceed to the next step unless the above test succeeds
    for you. You will lock yourself out of the system.

Configure pam_url on the clients
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. warning::

    At the time of writing, pam_url requires a patch to work right:
    http://skvidal.fedorapeople.org/patches/pam_url_ssl_client_auth.patch

    This patch should be merged in the nearest future.

Install pam_url and create a configuration file in /etc/pam_url.conf as
follows::

    # pam_url configuration file

    pam_url:
    {
        settings:
        {
            uri = "https://totp.example.com/";    # URI to fetch 
            returncode = "OK";                    # Expected return on success
            userfield = "user";                   # userfield name to send 
            passwdfield = "token";                # passwdfield name to send
            extradata = "&do=login";              # extradata to send
            prompt = "Google-Authenticator: "     # prompt string
        };

        ssl:
        {
            verify_peer = true;                   # Verify SSL validity
            verify_host = true;                   # Verify SSL/CN
            client_cert = "/etc/pki/totpcgi.pem"; # Client SSL certificate
            client_key  = "/etc/pki/totpcgi.pem"; # Client SSL key
        };
    };

    # END
   
Now you need to add it to your pam configuration. Let's change it so
users can sudo with their Google-Authenticator token. Edit
/etc/pam.d/sudo and add this line above all other auth lines::

    auth sufficient pam_url.so config=/etc/pam_url.conf


Using pincodes
~~~~~~~~~~~~~~
If you've ever used RSA tokens, you'll know that they support user pins
in addition to numeric tokens. This functionality is duplicated in
totpcgi. To enable it, you'll need to tweak a number of things.

First, create /etc/totpcgi/pincodes. The file format is the same as
/etc/shadow, except we only pay attention to the first 2 parts
(username:password-hash). Totpcgi supports sha-512 and sha-256 password
hashes, so some tools exist that can help you manage that file just like
an /etc/shadow file.

Alternatively, you can maintain the file on your own using bcrypt
hashes. To generate a bcrypt hash, install py-bcrypt and run::

    python -c "import bcrypt; print bcrypt.hashpw('pincode', bcrypt.gensalt())"

.. warning::

    Any time you specify passwords on command line like that, they will
    be viewable in "ps" and stored in your .bash_history.

.. warning::

    You should NOT use the same pin as the user system password, at
    least as long as you're using the file-based backend.
    
Make sure you set the right permissions on the pincodes file::

    chown root:totpcgi /etc/totpcgi/pincodes
    chmod 0640 /etc/totpcgi/pincodes

You should now be able to log in using pincode+tokencode. E.g. if you
set your pincode to 'secret' and your token is 555555, you enter
'secret555555'. You should be able to use that the moment the pincodes
file is in place.

You will now need to adjust /etc/totpcgi/totpcgi.conf to require that
pincodes are used::

    [main]
    require_pincode = True

The following PAM settings for sudo will require your users
authenticate with their Pincode+Token::

    #%PAM-1.0
    auth       required     pam_env.so
    auth       sufficient   pam_url.so config=/etc/pam_url.conf
    auth       requisite    pam_succeed_if.so uid >= 500 quiet
    auth       required     pam_deny.so

    account	   include      system-auth
    password   include      system-auth
    session    optional     pam_keyinit.so revoke
    session    required     pam_limits.so

You can additionally adjust the sshd pam configuration to do the same --
look in the contrib directory for it.

PostgreSQL backend
~~~~~~~~~~~~~~~~~~
If you want to use a load-balanced configuration, you will need to save
the state files in a central database.

.. warning::

    DO NOT use the File state backend in a multiple-server setup. This
    will make you vulnerable to token reuse, as one server will not know
    that the token was already presented to the other server.
    
Running databases is a complex task, but this is a quick guide. First,
install postgresql-server::

    yum install postgresql-server

Now init the database and start the server::

    service postgresql initdb
    service postgresql start

Now create the database and tables using the provided file. First,
though, edit totpcgi.psql and adjust the password to a non-default
value.

To create and populate the database, run::

    su -l postgres
    createdb totpcgi
    psql totpcgi < totpcgi.psql

Now you need to edit /var/lib/pgsql/data/pg_hba.conf and add the
following line before all the "all" lines::

    host   totpcgi   totpcgi   your.subnet/24   md5

Restart the server::

    service postgresql restart

Now, install python-psycopg2 on your totpcgi servers::

    yum install python-psycopg2

Now modify /etc/totpcgi/totpcgi.conf and enable the postgresql state
backend::

    [state_backend]
    engine = pgsql
    pg_connect_string = user=totpcgi password=wakkawakka host=localhost dbname=totpcgi
    
Restart the http server if you're using FastCGI. Make sure your iptables
rules on the server allow incoming postgresql traffic.

.. note::

    You can also use postgresql for your secrets and pincodes backend,
    though documentation for that remains to be written. For now, you
    can use the totpcgi.psql file to figure out the database schema --
    where things go should be pretty obvious.

LDAP backend
~~~~~~~~~~~~
You can use a LDAP directory for your pincode backend -- the CGI will
validate pincodes by trying to bind to the LDAP server using the
provided credentials. To enable the LDAP pincode backend, modify
/etc/totpcgi/totpcgi.conf and set the following::

    [pincode_backend]
    engine = ldap
    ldap_url = ldaps://ldap.example.com:636/
    ldap_cacert = /etc/pki/tls/certs/ca.crt
    ldap_dn = uid=$username,cn=users,cn=accounts,dc=example,dc=com

The ldap_dn listed above is for use with FreeIPA -- you will need to
modify it to reflect the valid DN for your users. The "$username" entry
will be replaced by whatever the authenticating clients provide as their
username (or, when using sudo, the username will be their current system
usersname).

Configuring LDAP is way beyond this document, so I leave this task up to
you. If you've never done it before but would like to try, I suggest you
look at FreeIPA (in RHEL6.2 and above as "ipa-server").
